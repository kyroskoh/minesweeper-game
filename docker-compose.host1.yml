# Host 1 - All-in-One (App + PostgreSQL + etcd)
# Runs: App1, PostgreSQL1 (Primary), etcd1, etcd3 (for quorum)
# Usage: docker-compose -f docker-compose.host1.yml up -d

version: '3.8'

services:
  # etcd Node 1 (Primary)
  etcd1:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: minesweeper-etcd1
    restart: unless-stopped
    environment:
      ETCD_NAME: etcd1
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://${HOST1_IP}:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://${HOST1_IP}:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://${HOST1_IP}:2380,etcd2=http://${HOST2_IP}:2380,etcd3=http://${HOST1_IP}:2381
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: minesweeper-patroni
    ports:
      - "2379:2379"
      - "2380:2380"
    networks:
      - app-network
    volumes:
      - etcd1-data:/etcd-data

  # etcd Node 3 (Quorum tiebreaker - runs on Host1)
  etcd3:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: minesweeper-etcd3
    restart: unless-stopped
    environment:
      ETCD_NAME: etcd3
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://${HOST1_IP}:2381
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2381
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2378
      ETCD_ADVERTISE_CLIENT_URLS: http://${HOST1_IP}:2378
      ETCD_INITIAL_CLUSTER: etcd1=http://${HOST1_IP}:2380,etcd2=http://${HOST2_IP}:2380,etcd3=http://${HOST1_IP}:2381
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: minesweeper-patroni
    ports:
      - "2378:2378"
      - "2381:2381"
    networks:
      - app-network
    volumes:
      - etcd3-data:/etcd-data

  # PostgreSQL Node 1 (Primary)
  postgres1:
    image: patroni/patroni:3.1.2
    container_name: minesweeper-postgres1
    restart: unless-stopped
    depends_on:
      - etcd1
      - etcd3
    env_file:
      - .env.host1
    environment:
      PATRONI_NAME: postgres1
      PATRONI_SCOPE: minesweeper-cluster
      PATRONI_ETCD3_HOSTS: ${HOST1_IP}:2379,${HOST2_IP}:2379,${HOST1_IP}:2378
      PATRONI_POSTGRESQL_DATA_DIR: /var/lib/postgresql/data
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: ${HOST1_IP}:5432
      PATRONI_RESTAPI_LISTEN: 0.0.0.0:8008
      PATRONI_RESTAPI_CONNECT_ADDRESS: ${HOST1_IP}:8008
      PATRONI_SUPERUSER_USERNAME: ${POSTGRES_SUPERUSER:-postgres}
      PATRONI_SUPERUSER_PASSWORD: ${POSTGRES_SUPERUSER_PASSWORD}
      PATRONI_REPLICATION_USERNAME: replicator
      PATRONI_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    ports:
      - "5432:5432"
      - "8008:8008"
    networks:
      - app-network
    volumes:
      - postgres1-data:/var/lib/postgresql/data
      - ./patroni/patroni.yml:/etc/patroni.yml
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-minesweeper_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # HAProxy for local health-aware routing
  haproxy1:
    image: haproxy:2.8-alpine
    container_name: minesweeper-haproxy1
    restart: unless-stopped
    depends_on:
      - postgres1
    environment:
      HOST1_IP: ${HOST1_IP}
      HOST2_IP: ${HOST2_IP}
    ports:
      - "5000:5000"  # Primary
      - "7000:7000"  # Stats
    networks:
      - app-network
    volumes:
      - ./haproxy/haproxy-2host.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

  # Minesweeper App 1
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: minesweeper-app1
    restart: unless-stopped
    depends_on:
      - postgres1
      - haproxy1
    env_file:
      - .env.host1
    environment:
      PORT: 3030
      # Connect to local HAProxy for automatic failover
      POSTGRES_HOST: haproxy1
      POSTGRES_PORT: 5000
      POSTGRES_DB: ${POSTGRES_DB:-minesweeper}
      POSTGRES_USER: ${POSTGRES_USER:-minesweeper_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DAILY_SEED_SALT: ${DAILY_SEED_SALT}
      SERVER_NAME: host1
    ports:
      - "3030:3030"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3030/api/leaderboard"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  etcd1-data:
  etcd3-data:
  postgres1-data:

