# PostgreSQL High Availability Cluster
# 2 PostgreSQL nodes with automatic failover using Patroni + etcd
# Usage: docker-compose -f docker-compose.postgres-ha.yml up -d

version: '3.8'

services:
  # etcd - Distributed configuration store for Patroni
  etcd1:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: minesweeper-etcd1
    restart: unless-stopped
    environment:
      ETCD_NAME: etcd1
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd1:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd1:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: patroni-cluster
    networks:
      - db-network
    volumes:
      - etcd1-data:/etcd-data

  etcd2:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: minesweeper-etcd2
    restart: unless-stopped
    environment:
      ETCD_NAME: etcd2
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd2:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd2:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: patroni-cluster
    networks:
      - db-network
    volumes:
      - etcd2-data:/etcd-data

  etcd3:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: minesweeper-etcd3
    restart: unless-stopped
    environment:
      ETCD_NAME: etcd3
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd3:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd3:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: patroni-cluster
    networks:
      - db-network
    volumes:
      - etcd3-data:/etcd-data

  # PostgreSQL Node 1 (Primary)
  postgres1:
    image: patroni/patroni:3.1.2
    container_name: minesweeper-postgres1
    restart: unless-stopped
    depends_on:
      - etcd1
      - etcd2
      - etcd3
    environment:
      PATRONI_NAME: postgres1
      PATRONI_SCOPE: minesweeper-cluster
      PATRONI_ETCD3_HOSTS: etcd1:2379,etcd2:2379,etcd3:2379
      PATRONI_POSTGRESQL_DATA_DIR: /var/lib/postgresql/data
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: postgres1:5432
      PATRONI_RESTAPI_LISTEN: 0.0.0.0:8008
      PATRONI_RESTAPI_CONNECT_ADDRESS: postgres1:8008
      PATRONI_SUPERUSER_USERNAME: ${POSTGRES_SUPERUSER:-postgres}
      PATRONI_SUPERUSER_PASSWORD: ${POSTGRES_SUPERUSER_PASSWORD:-postgres}
      PATRONI_REPLICATION_USERNAME: replicator
      PATRONI_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replicator_pass}
      PATRONI_admin_PASSWORD: ${PATRONI_ADMIN_PASSWORD:-admin}
      PATRONI_POSTGRESQL_PGPASS: /tmp/.pgpass
      # Application database and user
      POSTGRES_DB: ${POSTGRES_DB:-minesweeper}
      POSTGRES_USER: ${POSTGRES_USER:-minesweeper_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    networks:
      - db-network
    ports:
      - "5432:5432"
      - "8008:8008"
    volumes:
      - postgres1-data:/var/lib/postgresql/data
      - ./patroni/patroni.yml:/etc/patroni.yml
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-minesweeper_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Node 2 (Replica/Standby)
  postgres2:
    image: patroni/patroni:3.1.2
    container_name: minesweeper-postgres2
    restart: unless-stopped
    depends_on:
      - etcd1
      - etcd2
      - etcd3
    environment:
      PATRONI_NAME: postgres2
      PATRONI_SCOPE: minesweeper-cluster
      PATRONI_ETCD3_HOSTS: etcd1:2379,etcd2:2379,etcd3:2379
      PATRONI_POSTGRESQL_DATA_DIR: /var/lib/postgresql/data
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: postgres2:5432
      PATRONI_RESTAPI_LISTEN: 0.0.0.0:8008
      PATRONI_RESTAPI_CONNECT_ADDRESS: postgres2:8008
      PATRONI_SUPERUSER_USERNAME: ${POSTGRES_SUPERUSER:-postgres}
      PATRONI_SUPERUSER_PASSWORD: ${POSTGRES_SUPERUSER_PASSWORD:-postgres}
      PATRONI_REPLICATION_USERNAME: replicator
      PATRONI_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replicator_pass}
      PATRONI_admin_PASSWORD: ${PATRONI_ADMIN_PASSWORD:-admin}
      PATRONI_POSTGRESQL_PGPASS: /tmp/.pgpass
      # Application database and user
      POSTGRES_DB: ${POSTGRES_DB:-minesweeper}
      POSTGRES_USER: ${POSTGRES_USER:-minesweeper_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    networks:
      - db-network
    ports:
      - "5433:5432"
      - "8009:8008"
    volumes:
      - postgres2-data:/var/lib/postgresql/data
      - ./patroni/patroni.yml:/etc/patroni.yml
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-minesweeper_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # HAProxy - Load balancer for PostgreSQL
  haproxy:
    image: haproxy:2.8-alpine
    container_name: minesweeper-haproxy
    restart: unless-stopped
    depends_on:
      - postgres1
      - postgres2
    ports:
      - "5000:5000"    # Read-Write port (Primary only)
      - "5001:5001"    # Read-Only port (All replicas)
      - "7000:7000"    # HAProxy stats
    networks:
      - db-network
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5000"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  db-network:
    driver: bridge

volumes:
  etcd1-data:
  etcd2-data:
  etcd3-data:
  postgres1-data:
  postgres2-data:

